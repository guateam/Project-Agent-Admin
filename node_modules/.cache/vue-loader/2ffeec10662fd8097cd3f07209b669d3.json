{"remainingRequest":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\layouts\\HeaderAside\\components\\menu-header\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\layouts\\HeaderAside\\components\\menu-header\\index.vue","mtime":1547717291739},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547717212861},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1547717208828},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547717212861},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1547717286390}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { throttle } from 'lodash'\r\nimport { mapState } from 'vuex'\r\nimport menuMixin from '../mixin/menu'\r\nimport d2LayoutMainMenuItem from '../components/menu-item/index.vue'\r\nimport d2LayoutMainMenuSub from '../components/menu-sub/index.vue'\r\nexport default {\r\n  name: 'd2-layout-header-aside-menu-header',\r\n  mixins: [\r\n    menuMixin\r\n  ],\r\n  components: {\r\n    'd2-layout-header-aside-menu-item': d2LayoutMainMenuItem,\r\n    'd2-layout-header-aside-menu-sub': d2LayoutMainMenuSub\r\n  },\r\n  computed: {\r\n    ...mapState('d2admin/menu', [\r\n      'header'\r\n    ])\r\n  },\r\n  data () {\r\n    return {\r\n      active: '',\r\n      isScroll: false,\r\n      scrollWidth: 0,\r\n      contentWidth: 0,\r\n      currentTranslateX: 0,\r\n      throttledCheckScroll: null\r\n    }\r\n  },\r\n  watch: {\r\n    '$route.matched': {\r\n      handler (val) {\r\n        this.active = val[val.length - 1].path\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n  methods: {\r\n    scroll (direction) {\r\n      if (direction === 'left') {\r\n        // 向右滚动\r\n        this.currentTranslateX = 0\r\n      } else {\r\n        // 向左滚动\r\n        if (this.contentWidth * 2 - this.currentTranslateX <= this.scrollWidth) {\r\n          this.currentTranslateX -= this.contentWidth\r\n        } else {\r\n          this.currentTranslateX = this.contentWidth - this.scrollWidth\r\n        }\r\n      }\r\n    },\r\n    checkScroll () {\r\n      let contentWidth = this.$refs.content.clientWidth\r\n      let scrollWidth = this.$refs.scroll.clientWidth\r\n      if (this.isScroll) {\r\n        // 页面依旧允许滚动的情况，需要更新width\r\n        if (this.contentWidth - this.scrollWidth === this.currentTranslateX) {\r\n          // currentTranslateX 也需要相应变化【在右端到头的情况时】\r\n          this.currentTranslateX = contentWidth - scrollWidth\r\n          // 快速的滑动依旧存在判断和计算时对应的contentWidth变成正数，所以需要限制一下\r\n          if (this.currentTranslateX > 0) {\r\n            this.currentTranslateX = 0\r\n          }\r\n        }\r\n        // 更新元素数据\r\n        this.contentWidth = contentWidth\r\n        this.scrollWidth = scrollWidth\r\n        // 判断何时滚动消失: 当scroll > content\r\n        if (contentWidth > scrollWidth) {\r\n          this.isScroll = false\r\n        }\r\n      }\r\n      // 判断何时滚动出现: 当scroll < content\r\n      if (!this.isScroll && contentWidth < scrollWidth) {\r\n        this.isScroll = true\r\n        // 注意，当isScroll变为true，对应的元素盒子大小会发生变化\r\n        this.$nextTick(() => {\r\n          contentWidth = this.$refs.content.clientWidth\r\n          scrollWidth = this.$refs.scroll.clientWidth\r\n          this.contentWidth = contentWidth\r\n          this.scrollWidth = scrollWidth\r\n          this.currentTranslateX = 0\r\n        })\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    // 初始化判断\r\n    // 默认判断父元素和子元素的大小，以确定初始情况是否显示滚动\r\n    this.checkScroll()\r\n    // 全局窗口变化监听，判断父元素和子元素的大小，从而控制isScroll的开关\r\n    this.throttledCheckScroll = throttle(this.checkScroll, 300)\r\n    window.addEventListener('resize', this.throttledCheckScroll)\r\n  },\r\n  beforeDestroy () {\r\n    // 取消监听\r\n    window.removeEventListener('resize', this.throttledCheckScroll)\r\n  }\r\n}\r\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src\\layouts\\HeaderAside\\components\\menu-header","sourcesContent":["<template>\r\n  <div class=\"d2-theme-header-menu\" ref=\"page\" :class=\"{'is-scrollable': isScroll}\" flex=\"cross:center\">\r\n    <div class=\"d2-theme-header-menu__content\" ref=\"content\" flex-box=\"1\" flex>\r\n      <div class=\"d2-theme-header-menu__scroll\" ref=\"scroll\" flex-box=\"0\" :style=\"'transform: translateX(' + currentTranslateX + 'px);'\">\r\n        <el-menu mode=\"horizontal\" :default-active=\"active\" @select=\"handleMenuSelect\">\r\n          <template v-for=\"(menu, menuIndex) in header\">\r\n            <d2-layout-header-aside-menu-item v-if=\"menu.children === undefined\" :menu=\"menu\" :key=\"menuIndex\"/>\r\n            <d2-layout-header-aside-menu-sub v-else :menu=\"menu\" :key=\"menuIndex\"/>\r\n          </template>\r\n        </el-menu>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"isScroll\" class=\"d2-theme-header-menu__prev\" flex-box=\"0\" @click=\"scroll('left')\" flex=\"main:center cross:center\">\r\n      <i class=\"el-icon-arrow-left\"></i>\r\n    </div>\r\n    <div v-if=\"isScroll\" class=\"d2-theme-header-menu__next\" flex-box=\"0\" @click=\"scroll('right')\" flex=\"cross:center\">\r\n      <i class=\"el-icon-arrow-right\"></i>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { throttle } from 'lodash'\r\nimport { mapState } from 'vuex'\r\nimport menuMixin from '../mixin/menu'\r\nimport d2LayoutMainMenuItem from '../components/menu-item/index.vue'\r\nimport d2LayoutMainMenuSub from '../components/menu-sub/index.vue'\r\nexport default {\r\n  name: 'd2-layout-header-aside-menu-header',\r\n  mixins: [\r\n    menuMixin\r\n  ],\r\n  components: {\r\n    'd2-layout-header-aside-menu-item': d2LayoutMainMenuItem,\r\n    'd2-layout-header-aside-menu-sub': d2LayoutMainMenuSub\r\n  },\r\n  computed: {\r\n    ...mapState('d2admin/menu', [\r\n      'header'\r\n    ])\r\n  },\r\n  data () {\r\n    return {\r\n      active: '',\r\n      isScroll: false,\r\n      scrollWidth: 0,\r\n      contentWidth: 0,\r\n      currentTranslateX: 0,\r\n      throttledCheckScroll: null\r\n    }\r\n  },\r\n  watch: {\r\n    '$route.matched': {\r\n      handler (val) {\r\n        this.active = val[val.length - 1].path\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n  methods: {\r\n    scroll (direction) {\r\n      if (direction === 'left') {\r\n        // 向右滚动\r\n        this.currentTranslateX = 0\r\n      } else {\r\n        // 向左滚动\r\n        if (this.contentWidth * 2 - this.currentTranslateX <= this.scrollWidth) {\r\n          this.currentTranslateX -= this.contentWidth\r\n        } else {\r\n          this.currentTranslateX = this.contentWidth - this.scrollWidth\r\n        }\r\n      }\r\n    },\r\n    checkScroll () {\r\n      let contentWidth = this.$refs.content.clientWidth\r\n      let scrollWidth = this.$refs.scroll.clientWidth\r\n      if (this.isScroll) {\r\n        // 页面依旧允许滚动的情况，需要更新width\r\n        if (this.contentWidth - this.scrollWidth === this.currentTranslateX) {\r\n          // currentTranslateX 也需要相应变化【在右端到头的情况时】\r\n          this.currentTranslateX = contentWidth - scrollWidth\r\n          // 快速的滑动依旧存在判断和计算时对应的contentWidth变成正数，所以需要限制一下\r\n          if (this.currentTranslateX > 0) {\r\n            this.currentTranslateX = 0\r\n          }\r\n        }\r\n        // 更新元素数据\r\n        this.contentWidth = contentWidth\r\n        this.scrollWidth = scrollWidth\r\n        // 判断何时滚动消失: 当scroll > content\r\n        if (contentWidth > scrollWidth) {\r\n          this.isScroll = false\r\n        }\r\n      }\r\n      // 判断何时滚动出现: 当scroll < content\r\n      if (!this.isScroll && contentWidth < scrollWidth) {\r\n        this.isScroll = true\r\n        // 注意，当isScroll变为true，对应的元素盒子大小会发生变化\r\n        this.$nextTick(() => {\r\n          contentWidth = this.$refs.content.clientWidth\r\n          scrollWidth = this.$refs.scroll.clientWidth\r\n          this.contentWidth = contentWidth\r\n          this.scrollWidth = scrollWidth\r\n          this.currentTranslateX = 0\r\n        })\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    // 初始化判断\r\n    // 默认判断父元素和子元素的大小，以确定初始情况是否显示滚动\r\n    this.checkScroll()\r\n    // 全局窗口变化监听，判断父元素和子元素的大小，从而控制isScroll的开关\r\n    this.throttledCheckScroll = throttle(this.checkScroll, 300)\r\n    window.addEventListener('resize', this.throttledCheckScroll)\r\n  },\r\n  beforeDestroy () {\r\n    // 取消监听\r\n    window.removeEventListener('resize', this.throttledCheckScroll)\r\n  }\r\n}\r\n</script>\r\n"]}]}