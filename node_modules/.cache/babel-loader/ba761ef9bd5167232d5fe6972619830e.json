{"remainingRequest":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\babel-loader\\lib\\index.js!D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\plugin\\axios\\index.js","dependencies":[{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\plugin\\axios\\index.js","mtime":1547717291894},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547717212861},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1547717208828},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\eslint-loader\\index.js","mtime":1547717230935}],"contextDependencies":[],"result":["import _Promise from \"D:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\Project-Agent-Admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport store from '@/store';\nimport axios from 'axios';\nimport { Message } from 'element-ui';\nimport util from '@/libs/util'; // 创建一个错误\n\nfunction errorCreat(msg) {\n  var err = new Error(msg);\n  errorLog(err);\n  throw err;\n} // 记录和显示错误\n\n\nfunction errorLog(err) {\n  // 添加到日志\n  store.dispatch('d2admin/log/add', {\n    type: 'error',\n    err: err,\n    info: '数据请求异常'\n  }); // 打印到控制台\n\n  if (process.env.NODE_ENV === 'development') {\n    util.log.danger('>>>>>> Error >>>>>>');\n    console.log(err);\n  } // 显示提示\n\n\n  Message({\n    message: err.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n} // 创建一个 axios 实例\n\n\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_API,\n  timeout: 5000 // 请求超时时间\n\n}); // 请求拦截器\n\nservice.interceptors.request.use(function (config) {\n  // 在请求发送之前做一些处理\n  if (!/^https:\\/\\/|http:\\/\\//.test(config.url)) {\n    var token = util.cookies.get('token');\n\n    if (token && token !== 'undefined') {\n      // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改\n      config.headers['X-Token'] = token;\n    }\n  }\n\n  return config;\n}, function (error) {\n  // 发送失败\n  console.log(error);\n\n  _Promise.reject(error);\n}); // 响应拦截器\n\nservice.interceptors.response.use(function (response) {\n  // dataAxios 是 axios 返回数据中的 data\n  var dataAxios = response.data; // 这个状态码是和后端约定的\n\n  var code = dataAxios.code; // 根据 code 进行判断\n\n  if (code === undefined) {\n    // 如果没有 code 代表这不是项目后端开发的接口 比如可能是 D2Admin 请求最新版本\n    return dataAxios;\n  } else {\n    // 有 code 代表这是一个后端接口 可以进行进一步的判断\n    switch (code) {\n      case 0:\n        // [ 示例 ] code === 0 代表没有错误\n        return dataAxios.data;\n\n      case 'xxx':\n        // [ 示例 ] 其它和后台约定的 code\n        errorCreat(\"[ code: xxx ] \".concat(dataAxios.msg, \": \").concat(response.config.url));\n        break;\n\n      default:\n        // 不是正确的 code\n        errorCreat(\"\".concat(dataAxios.msg, \": \").concat(response.config.url));\n        break;\n    }\n  }\n}, function (error) {\n  if (error && error.response) {\n    switch (error.response.status) {\n      case 400:\n        error.message = '请求错误';\n        break;\n\n      case 401:\n        error.message = '未授权，请登录';\n        break;\n\n      case 403:\n        error.message = '拒绝访问';\n        break;\n\n      case 404:\n        error.message = \"\\u8BF7\\u6C42\\u5730\\u5740\\u51FA\\u9519: \".concat(error.response.config.url);\n        break;\n\n      case 408:\n        error.message = '请求超时';\n        break;\n\n      case 500:\n        error.message = '服务器内部错误';\n        break;\n\n      case 501:\n        error.message = '服务未实现';\n        break;\n\n      case 502:\n        error.message = '网关错误';\n        break;\n\n      case 503:\n        error.message = '服务不可用';\n        break;\n\n      case 504:\n        error.message = '网关超时';\n        break;\n\n      case 505:\n        error.message = 'HTTP版本不受支持';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  errorLog(error);\n  return _Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\plugin\\axios\\index.js"],"names":["store","axios","Message","util","errorCreat","msg","err","Error","errorLog","dispatch","type","info","process","env","NODE_ENV","log","danger","console","message","duration","service","create","baseURL","VUE_APP_API","timeout","interceptors","request","use","config","test","url","token","cookies","get","headers","error","reject","response","dataAxios","data","code","undefined","status"],"mappings":"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","sourcesContent":["import store from '@/store'\r\nimport axios from 'axios'\r\nimport { Message } from 'element-ui'\r\nimport util from '@/libs/util'\r\n\r\n// 创建一个错误\r\nfunction errorCreat (msg) {\r\n  const err = new Error(msg)\r\n  errorLog(err)\r\n  throw err\r\n}\r\n\r\n// 记录和显示错误\r\nfunction errorLog (err) {\r\n  // 添加到日志\r\n  store.dispatch('d2admin/log/add', {\r\n    type: 'error',\r\n    err,\r\n    info: '数据请求异常'\r\n  })\r\n  // 打印到控制台\r\n  if (process.env.NODE_ENV === 'development') {\r\n    util.log.danger('>>>>>> Error >>>>>>')\r\n    console.log(err)\r\n  }\r\n  // 显示提示\r\n  Message({\r\n    message: err.message,\r\n    type: 'error',\r\n    duration: 5 * 1000\r\n  })\r\n}\r\n\r\n// 创建一个 axios 实例\r\nconst service = axios.create({\r\n  baseURL: process.env.VUE_APP_API,\r\n  timeout: 5000 // 请求超时时间\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // 在请求发送之前做一些处理\r\n    if (!(/^https:\\/\\/|http:\\/\\//.test(config.url))) {\r\n      const token = util.cookies.get('token')\r\n      if (token && token !== 'undefined') {\r\n        // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改\r\n        config.headers['X-Token'] = token\r\n      }\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    // 发送失败\r\n    console.log(error)\r\n    Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n    // dataAxios 是 axios 返回数据中的 data\r\n    const dataAxios = response.data\r\n    // 这个状态码是和后端约定的\r\n    const { code } = dataAxios\r\n    // 根据 code 进行判断\r\n    if (code === undefined) {\r\n      // 如果没有 code 代表这不是项目后端开发的接口 比如可能是 D2Admin 请求最新版本\r\n      return dataAxios\r\n    } else {\r\n      // 有 code 代表这是一个后端接口 可以进行进一步的判断\r\n      switch (code) {\r\n        case 0:\r\n          // [ 示例 ] code === 0 代表没有错误\r\n          return dataAxios.data\r\n        case 'xxx':\r\n          // [ 示例 ] 其它和后台约定的 code\r\n          errorCreat(`[ code: xxx ] ${dataAxios.msg}: ${response.config.url}`)\r\n          break\r\n        default:\r\n          // 不是正确的 code\r\n          errorCreat(`${dataAxios.msg}: ${response.config.url}`)\r\n          break\r\n      }\r\n    }\r\n  },\r\n  error => {\r\n    if (error && error.response) {\r\n      switch (error.response.status) {\r\n        case 400: error.message = '请求错误'; break\r\n        case 401: error.message = '未授权，请登录'; break\r\n        case 403: error.message = '拒绝访问'; break\r\n        case 404: error.message = `请求地址出错: ${error.response.config.url}`; break\r\n        case 408: error.message = '请求超时'; break\r\n        case 500: error.message = '服务器内部错误'; break\r\n        case 501: error.message = '服务未实现'; break\r\n        case 502: error.message = '网关错误'; break\r\n        case 503: error.message = '服务不可用'; break\r\n        case 504: error.message = '网关超时'; break\r\n        case 505: error.message = 'HTTP版本不受支持'; break\r\n        default: break\r\n      }\r\n    }\r\n    errorLog(error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default service\r\n"]}]}