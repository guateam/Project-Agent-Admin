{"remainingRequest":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\babel-loader\\lib\\index.js!D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\store\\modules\\d2admin\\modules\\page.js","dependencies":[{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\store\\modules\\d2admin\\modules\\page.js","mtime":1547717291945},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547717212861},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1547717208828},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\eslint-loader\\index.js","mtime":1547717230935}],"contextDependencies":[],"result":["import _Set from \"D:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\Project-Agent-Admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/set\";\nimport _Array$from from \"D:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\Project-Agent-Admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/array/from\";\nimport _toConsumableArray from \"D:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\Project-Agent-Admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _Object$assign from \"D:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\Project-Agent-Admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\Project-Agent-Admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Promise from \"D:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\Project-Agent-Admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport { remove, get } from 'lodash'; // 设置文件\n\nimport setting from '@/setting.js'; // 判定是否需要缓存\n\nvar isKeepAlive = function isKeepAlive(data) {\n  return get(data, 'meta.cache', false);\n};\n\nexport default {\n  namespaced: true,\n  state: {\n    // 可以在多页 tab 模式下显示的页面\n    pool: [],\n    // 当前显示的多页面列表\n    opened: setting.page.opened,\n    // 当前页面\n    current: '',\n    // 需要缓存的页面 name\n    keepAlive: []\n  },\n  actions: {\n    /**\r\n     * @class opened\r\n     * @description 从持久化数据载入分页列表\r\n     * @param {Object} state vuex state\r\n     */\n    openedLoad: function openedLoad(_ref) {\n      var state = _ref.state,\n          commit = _ref.commit,\n          dispatch = _ref.dispatch;\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(resolve) {\n          var value, valid;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return dispatch('d2admin/db/get', {\n                    dbName: 'sys',\n                    path: 'page.opened',\n                    defaultValue: setting.page.opened,\n                    user: true\n                  }, {\n                    root: true\n                  });\n\n                case 2:\n                  value = _context.sent;\n                  // 在处理函数中进行数据优化 过滤掉现在已经失效的页签或者已经改变了信息的页签\n                  // 以 name 字段为准\n                  // 如果页面过多的话可能需要优化算法\n                  // valid 有效列表 1, 1, 0, 1 => 有效, 有效, 失效, 有效\n                  valid = []; // 处理数据\n\n                  state.opened = value.map(function (opened) {\n                    // 忽略首页\n                    if (opened.name === 'index') {\n                      valid.push(1);\n                      return opened;\n                    } // 尝试在所有的支持多标签页的页面里找到 name 匹配的页面\n\n\n                    var find = state.pool.find(function (item) {\n                      return item.name === opened.name;\n                    }); // 记录有效或无效信息\n\n                    valid.push(find ? 1 : 0); // 返回合并后的数据 新的覆盖旧的\n                    // 新的数据中一般不会携带 params 和 query, 所以旧的参数会留存\n\n                    return _Object$assign({}, opened, find);\n                  }).filter(function (opened, index) {\n                    return valid[index] === 1;\n                  }); // 根据 opened 数据生成缓存设置\n\n                  commit('keepAliveRefresh'); // end\n\n                  resolve();\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * 将 opened 属性赋值并持久化 在这之前请先确保已经更新了 state.opened\r\n     * @param {Object} state vuex state\r\n     */\n    opend2db: function opend2db(_ref3) {\n      var state = _ref3.state,\n          dispatch = _ref3.dispatch;\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(resolve) {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  // 设置数据\n                  dispatch('d2admin/db/set', {\n                    dbName: 'sys',\n                    path: 'page.opened',\n                    value: state.opened,\n                    user: true\n                  }, {\n                    root: true\n                  }); // end\n\n                  resolve();\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        return function (_x2) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @class opened\r\n     * @description 更新页面列表上的某一项\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { index, params, query } 路由信息\r\n     */\n    openedUpdate: function openedUpdate(_ref5, _ref6) {\n      var state = _ref5.state,\n          commit = _ref5.commit,\n          dispatch = _ref5.dispatch;\n      var index = _ref6.index,\n          params = _ref6.params,\n          query = _ref6.query;\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref7 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(resolve) {\n          var page;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  // 更新页面列表某一项\n                  page = state.opened[index];\n                  page.params = params || page.params;\n                  page.query = query || page.query;\n                  state.opened.splice(index, 1, page); // 增加缓存设置\n\n                  if (isKeepAlive(page)) {\n                    commit('keepAlivePush', page.name);\n                  } // 持久化\n\n\n                  _context3.next = 7;\n                  return dispatch('opend2db');\n\n                case 7:\n                  // end\n                  resolve();\n\n                case 8:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n\n        return function (_x3) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @class opened\r\n     * @description 新增一个 tag (打开一个页面)\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param new tag info\r\n     */\n    add: function add(_ref8, _ref9) {\n      var state = _ref8.state,\n          commit = _ref8.commit,\n          dispatch = _ref8.dispatch;\n      var tag = _ref9.tag,\n          params = _ref9.params,\n          query = _ref9.query;\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref10 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee4(resolve) {\n          var newTag;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  // 设置新的 tag 在新打开一个以前没打开过的页面时使用\n                  newTag = tag;\n                  newTag.params = params || newTag.params;\n                  newTag.query = query || newTag.query; // 添加进当前显示的页面数组\n\n                  state.opened.push(newTag); // 如果这个页面需要缓存 将其添加到缓存设置\n\n                  if (isKeepAlive(newTag)) {\n                    commit('keepAlivePush', tag.name);\n                  } // 持久化\n\n\n                  _context4.next = 7;\n                  return dispatch('opend2db');\n\n                case 7:\n                  // end\n                  resolve();\n\n                case 8:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n\n        return function (_x4) {\n          return _ref10.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @class current\r\n     * @description 打开一个新的页面\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { name, params, query } 路由信息\r\n     */\n    open: function open(_ref11, _ref12) {\n      var state = _ref11.state,\n          commit = _ref11.commit,\n          dispatch = _ref11.dispatch;\n      var name = _ref12.name,\n          params = _ref12.params,\n          query = _ref12.query;\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref13 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee5(resolve) {\n          var opened, pageOpendIndex, pageOpend, page;\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  // 已经打开的页面\n                  opened = state.opened; // 判断此页面是否已经打开 并且记录位置\n\n                  pageOpendIndex = 0;\n                  pageOpend = opened.find(function (page, index) {\n                    var same = page.name === name;\n                    pageOpendIndex = same ? index : pageOpendIndex;\n                    return same;\n                  });\n\n                  if (!pageOpend) {\n                    _context5.next = 8;\n                    break;\n                  }\n\n                  _context5.next = 6;\n                  return dispatch('openedUpdate', {\n                    index: pageOpendIndex,\n                    params: params,\n                    query: query\n                  });\n\n                case 6:\n                  _context5.next = 12;\n                  break;\n\n                case 8:\n                  // 页面以前没有打开过\n                  page = state.pool.find(function (t) {\n                    return t.name === name;\n                  }); // 如果这里没有找到 page 代表这个路由虽然在框架内 但是不参与标签页显示\n\n                  if (!page) {\n                    _context5.next = 12;\n                    break;\n                  }\n\n                  _context5.next = 12;\n                  return dispatch('add', {\n                    tag: page,\n                    params: params,\n                    query: query\n                  });\n\n                case 12:\n                  commit('currentSet', name); // end\n\n                  resolve();\n\n                case 14:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this);\n        }));\n\n        return function (_x5) {\n          return _ref13.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @class opened\r\n     * @description 关闭一个 tag (关闭一个页面)\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { tagName: 要关闭的标签名字, vm: vue }\r\n     */\n    close: function close(_ref14, _ref15) {\n      var state = _ref14.state,\n          commit = _ref14.commit,\n          dispatch = _ref14.dispatch;\n      var tagName = _ref15.tagName,\n          vm = _ref15.vm;\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref16 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee6(resolve) {\n          var newPage, isCurrent, len, i, index, _newPage, _newPage$name, name, _newPage$params, params, _newPage$query, query, routerObj;\n\n          return regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  // 下个新的页面\n                  newPage = state.opened[0];\n                  isCurrent = state.current === tagName; // 如果关闭的页面就是当前显示的页面\n\n                  if (!isCurrent) {\n                    _context6.next = 12;\n                    break;\n                  }\n\n                  // 去找一个新的页面\n                  len = state.opened.length;\n                  i = 1;\n\n                case 5:\n                  if (!(i < len)) {\n                    _context6.next = 12;\n                    break;\n                  }\n\n                  if (!(state.opened[i].name === tagName)) {\n                    _context6.next = 9;\n                    break;\n                  }\n\n                  if (i < len - 1) {\n                    newPage = state.opened[i + 1];\n                  } else {\n                    newPage = state.opened[i - 1];\n                  }\n\n                  return _context6.abrupt(\"break\", 12);\n\n                case 9:\n                  i++;\n                  _context6.next = 5;\n                  break;\n\n                case 12:\n                  // 找到这个页面在已经打开的数据里是第几个\n                  index = state.opened.findIndex(function (page) {\n                    return page.name === tagName;\n                  });\n\n                  if (index >= 0) {\n                    // 更新数据 删除关闭的页面\n                    state.opened.splice(index, 1); // 如果这个页面是缓存的页面 将其在缓存设置中删除\n\n                    commit('keepAliveRemove', tagName);\n                  } // 持久化\n\n\n                  _context6.next = 16;\n                  return dispatch('opend2db');\n\n                case 16:\n                  // 最后需要判断是否需要跳到首页\n                  if (isCurrent) {\n                    _newPage = newPage, _newPage$name = _newPage.name, name = _newPage$name === void 0 ? '' : _newPage$name, _newPage$params = _newPage.params, params = _newPage$params === void 0 ? {} : _newPage$params, _newPage$query = _newPage.query, query = _newPage$query === void 0 ? {} : _newPage$query;\n                    routerObj = {\n                      name: name,\n                      params: params,\n                      query: query\n                    };\n                    vm.$router.push(routerObj);\n                  } // end\n\n\n                  resolve();\n\n                case 18:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6, this);\n        }));\n\n        return function (_x6) {\n          return _ref16.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @class opened\r\n     * @description 关闭当前标签左边的标签\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { pageSelect: 当前选中的tagName, vm: vue }\r\n     */\n    closeLeft: function closeLeft(_ref17) {\n      var state = _ref17.state,\n          commit = _ref17.commit,\n          dispatch = _ref17.dispatch;\n\n      var _ref18 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pageSelect = _ref18.pageSelect,\n          vm = _ref18.vm;\n\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref19 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee7(resolve) {\n          var pageAim, currentIndex;\n          return regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  pageAim = pageSelect || state.current;\n                  currentIndex = 0;\n                  state.opened.forEach(function (page, index) {\n                    if (page.name === pageAim) {\n                      currentIndex = index;\n                    }\n                  });\n\n                  if (currentIndex > 0) {\n                    // 删除打开的页面 并在缓存设置中删除\n                    state.opened.splice(1, currentIndex - 1).forEach(function (_ref20) {\n                      var name = _ref20.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                  }\n\n                  state.current = pageAim;\n\n                  if (vm && vm.$route.name !== pageAim) {\n                    vm.$router.push({\n                      name: pageAim\n                    });\n                  } // 持久化\n\n\n                  _context7.next = 8;\n                  return dispatch('opend2db');\n\n                case 8:\n                  // end\n                  resolve();\n\n                case 9:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7, this);\n        }));\n\n        return function (_x7) {\n          return _ref19.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @class opened\r\n     * @description 关闭当前标签右边的标签\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { pageSelect: 当前选中的tagName, vm: vue }\r\n     */\n    closeRight: function closeRight(_ref21) {\n      var state = _ref21.state,\n          commit = _ref21.commit,\n          dispatch = _ref21.dispatch;\n\n      var _ref22 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pageSelect = _ref22.pageSelect,\n          vm = _ref22.vm;\n\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref23 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee8(resolve) {\n          var pageAim, currentIndex;\n          return regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  pageAim = pageSelect || state.current;\n                  currentIndex = 0;\n                  state.opened.forEach(function (page, index) {\n                    if (page.name === pageAim) {\n                      currentIndex = index;\n                    }\n                  }); // 删除打开的页面 并在缓存设置中删除\n\n                  state.opened.splice(currentIndex + 1).forEach(function (_ref24) {\n                    var name = _ref24.name;\n                    return commit('keepAliveRemove', name);\n                  }); // 设置当前的页面\n\n                  state.current = pageAim;\n\n                  if (vm && vm.$route.name !== pageAim) {\n                    vm.$router.push({\n                      name: pageAim\n                    });\n                  } // 持久化\n\n\n                  _context8.next = 8;\n                  return dispatch('opend2db');\n\n                case 8:\n                  // end\n                  resolve();\n\n                case 9:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8, this);\n        }));\n\n        return function (_x8) {\n          return _ref23.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @class opened\r\n     * @description 关闭当前激活之外的 tag\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { pageSelect: 当前选中的tagName, vm: vue }\r\n     */\n    closeOther: function closeOther(_ref25) {\n      var state = _ref25.state,\n          commit = _ref25.commit,\n          dispatch = _ref25.dispatch;\n\n      var _ref26 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pageSelect = _ref26.pageSelect,\n          vm = _ref26.vm;\n\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref27 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee9(resolve) {\n          var pageAim, currentIndex;\n          return regeneratorRuntime.wrap(function _callee9$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  pageAim = pageSelect || state.current;\n                  currentIndex = 0;\n                  state.opened.forEach(function (page, index) {\n                    if (page.name === pageAim) {\n                      currentIndex = index;\n                    }\n                  }); // 删除打开的页面数据 并更新缓存设置\n\n                  if (currentIndex === 0) {\n                    state.opened.splice(1).forEach(function (_ref28) {\n                      var name = _ref28.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                  } else {\n                    state.opened.splice(currentIndex + 1).forEach(function (_ref29) {\n                      var name = _ref29.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                    state.opened.splice(1, currentIndex - 1).forEach(function (_ref30) {\n                      var name = _ref30.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                  } // 设置新的页面\n\n\n                  state.current = pageAim;\n\n                  if (vm && vm.$route.name !== pageAim) {\n                    vm.$router.push({\n                      name: pageAim\n                    });\n                  } // 持久化\n\n\n                  _context9.next = 8;\n                  return dispatch('opend2db');\n\n                case 8:\n                  // end\n                  resolve();\n\n                case 9:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee9, this);\n        }));\n\n        return function (_x9) {\n          return _ref27.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @class opened\r\n     * @description 关闭所有 tag\r\n     * @param {Object} state vuex state\r\n     * @param {Object} vm vue\r\n     */\n    closeAll: function closeAll(_ref31, vm) {\n      var state = _ref31.state,\n          commit = _ref31.commit,\n          dispatch = _ref31.dispatch;\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref32 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee10(resolve) {\n          return regeneratorRuntime.wrap(function _callee10$(_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  // 删除打开的页面 并在缓存设置中删除\n                  state.opened.splice(1).forEach(function (_ref33) {\n                    var name = _ref33.name;\n                    return commit('keepAliveRemove', name);\n                  }); // 持久化\n\n                  _context10.next = 3;\n                  return dispatch('opend2db');\n\n                case 3:\n                  // 关闭所有的标签页后需要判断一次现在是不是在首页\n                  if (vm.$route.name !== 'index') {\n                    vm.$router.push({\n                      name: 'index'\n                    });\n                  } // end\n\n\n                  resolve();\n\n                case 5:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee10, this);\n        }));\n\n        return function (_x10) {\n          return _ref32.apply(this, arguments);\n        };\n      }());\n    }\n  },\n  mutations: {\n    /**\r\n     * @class keepAlive\r\n     * @description 从已经打开的页面记录中更新需要缓存的页面记录\r\n     * @param {Object} state vuex state\r\n     */\n    keepAliveRefresh: function keepAliveRefresh(state) {\n      state.keepAlive = state.opened.filter(function (item) {\n        return isKeepAlive(item);\n      }).map(function (e) {\n        return e.name;\n      });\n    },\n\n    /**\r\n     * @description 删除一个页面的缓存设置\r\n     * @param {Object} state vuex state\r\n     * @param {String} name name\r\n     */\n    keepAliveRemove: function keepAliveRemove(state, name) {\n      var list = _toConsumableArray(state.keepAlive);\n\n      remove(list, function (item) {\n        return item === name;\n      });\n      state.keepAlive = list;\n    },\n\n    /**\r\n     * @description 增加一个页面的缓存设置\r\n     * @param {Object} state vuex state\r\n     * @param {String} name name\r\n     */\n    keepAlivePush: function keepAlivePush(state, name) {\n      var keep = _toConsumableArray(state.keepAlive);\n\n      keep.push(name);\n      state.keepAlive = _Array$from(new _Set(keep));\n    },\n\n    /**\r\n     * @description 清空页面缓存设置\r\n     * @param {Object} state vuex state\r\n     */\n    keepAliveClean: function keepAliveClean(state) {\n      state.keepAlive = [];\n    },\n\n    /**\r\n     * @class current\r\n     * @description 设置当前激活的页面 name\r\n     * @param {Object} state vuex state\r\n     * @param {String} name new name\r\n     */\n    currentSet: function currentSet(state, name) {\n      state.current = name;\n    },\n\n    /**\r\n     * @class pool\r\n     * @description 保存 pool (候选池)\r\n     * @param {Object} state vuex state\r\n     * @param {Array} routes routes\r\n     */\n    init: function init(state, routes) {\n      var pool = [];\n\n      var push = function push(routes) {\n        routes.forEach(function (route) {\n          if (route.children) {\n            push(route.children);\n          } else {\n            if (!route.hidden) {\n              var meta = route.meta,\n                  name = route.name,\n                  path = route.path;\n              pool.push({\n                meta: meta,\n                name: name,\n                path: path\n              });\n            }\n          }\n        });\n      };\n\n      push(routes);\n      state.pool = pool;\n    }\n  }\n};",{"version":3,"sources":["D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\store\\modules\\d2admin\\modules\\page.js"],"names":["remove","get","setting","isKeepAlive","data","namespaced","state","pool","opened","page","current","keepAlive","actions","openedLoad","commit","dispatch","resolve","dbName","path","defaultValue","user","root","value","valid","map","name","push","find","item","filter","index","opend2db","openedUpdate","params","query","splice","add","tag","newTag","open","pageOpendIndex","pageOpend","same","t","close","tagName","vm","newPage","isCurrent","len","length","i","findIndex","routerObj","$router","closeLeft","pageSelect","pageAim","currentIndex","forEach","$route","closeRight","closeOther","closeAll","mutations","keepAliveRefresh","e","keepAliveRemove","list","keepAlivePush","keep","keepAliveClean","currentSet","init","routes","route","children","hidden","meta"],"mappings":"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","sourcesContent":["import { remove, get } from 'lodash'\r\n\r\n// 设置文件\r\nimport setting from '@/setting.js'\r\n\r\n// 判定是否需要缓存\r\nconst isKeepAlive = data => get(data, 'meta.cache', false)\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    // 可以在多页 tab 模式下显示的页面\r\n    pool: [],\r\n    // 当前显示的多页面列表\r\n    opened: setting.page.opened,\r\n    // 当前页面\r\n    current: '',\r\n    // 需要缓存的页面 name\r\n    keepAlive: []\r\n  },\r\n  actions: {\r\n    /**\r\n     * @class opened\r\n     * @description 从持久化数据载入分页列表\r\n     * @param {Object} state vuex state\r\n     */\r\n    openedLoad ({ state, commit, dispatch }) {\r\n      return new Promise(async resolve => {\r\n        // store 赋值\r\n        const value = await dispatch('d2admin/db/get', {\r\n          dbName: 'sys',\r\n          path: 'page.opened',\r\n          defaultValue: setting.page.opened,\r\n          user: true\r\n        }, { root: true })\r\n        // 在处理函数中进行数据优化 过滤掉现在已经失效的页签或者已经改变了信息的页签\r\n        // 以 name 字段为准\r\n        // 如果页面过多的话可能需要优化算法\r\n        // valid 有效列表 1, 1, 0, 1 => 有效, 有效, 失效, 有效\r\n        const valid = []\r\n        // 处理数据\r\n        state.opened = value.map(opened => {\r\n          // 忽略首页\r\n          if (opened.name === 'index') {\r\n            valid.push(1)\r\n            return opened\r\n          }\r\n          // 尝试在所有的支持多标签页的页面里找到 name 匹配的页面\r\n          const find = state.pool.find(item => item.name === opened.name)\r\n          // 记录有效或无效信息\r\n          valid.push(find ? 1 : 0)\r\n          // 返回合并后的数据 新的覆盖旧的\r\n          // 新的数据中一般不会携带 params 和 query, 所以旧的参数会留存\r\n          return Object.assign({}, opened, find)\r\n        }).filter((opened, index) => valid[index] === 1)\r\n        // 根据 opened 数据生成缓存设置\r\n        commit('keepAliveRefresh')\r\n        // end\r\n        resolve()\r\n      })\r\n    },\r\n    /**\r\n     * 将 opened 属性赋值并持久化 在这之前请先确保已经更新了 state.opened\r\n     * @param {Object} state vuex state\r\n     */\r\n    opend2db ({ state, dispatch }) {\r\n      return new Promise(async resolve => {\r\n        // 设置数据\r\n        dispatch('d2admin/db/set', {\r\n          dbName: 'sys',\r\n          path: 'page.opened',\r\n          value: state.opened,\r\n          user: true\r\n        }, { root: true })\r\n        // end\r\n        resolve()\r\n      })\r\n    },\r\n    /**\r\n     * @class opened\r\n     * @description 更新页面列表上的某一项\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { index, params, query } 路由信息\r\n     */\r\n    openedUpdate ({ state, commit, dispatch }, { index, params, query }) {\r\n      return new Promise(async resolve => {\r\n        // 更新页面列表某一项\r\n        let page = state.opened[index]\r\n        page.params = params || page.params\r\n        page.query = query || page.query\r\n        state.opened.splice(index, 1, page)\r\n        // 增加缓存设置\r\n        if (isKeepAlive(page)) {\r\n          commit('keepAlivePush', page.name)\r\n        }\r\n        // 持久化\r\n        await dispatch('opend2db')\r\n        // end\r\n        resolve()\r\n      })\r\n    },\r\n    /**\r\n     * @class opened\r\n     * @description 新增一个 tag (打开一个页面)\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param new tag info\r\n     */\r\n    add ({ state, commit, dispatch }, { tag, params, query }) {\r\n      return new Promise(async resolve => {\r\n        // 设置新的 tag 在新打开一个以前没打开过的页面时使用\r\n        let newTag = tag\r\n        newTag.params = params || newTag.params\r\n        newTag.query = query || newTag.query\r\n        // 添加进当前显示的页面数组\r\n        state.opened.push(newTag)\r\n        // 如果这个页面需要缓存 将其添加到缓存设置\r\n        if (isKeepAlive(newTag)) {\r\n          commit('keepAlivePush', tag.name)\r\n        }\r\n        // 持久化\r\n        await dispatch('opend2db')\r\n        // end\r\n        resolve()\r\n      })\r\n    },\r\n    /**\r\n     * @class current\r\n     * @description 打开一个新的页面\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { name, params, query } 路由信息\r\n     */\r\n    open ({ state, commit, dispatch }, { name, params, query }) {\r\n      return new Promise(async resolve => {\r\n        // 已经打开的页面\r\n        let opened = state.opened\r\n        // 判断此页面是否已经打开 并且记录位置\r\n        let pageOpendIndex = 0\r\n        const pageOpend = opened.find((page, index) => {\r\n          const same = page.name === name\r\n          pageOpendIndex = same ? index : pageOpendIndex\r\n          return same\r\n        })\r\n        if (pageOpend) {\r\n          // 页面以前打开过 但是新的页面可能 name 一样，参数不一样\r\n          await dispatch('openedUpdate', {\r\n            index: pageOpendIndex,\r\n            params,\r\n            query\r\n          })\r\n        } else {\r\n          // 页面以前没有打开过\r\n          let page = state.pool.find(t => t.name === name)\r\n          // 如果这里没有找到 page 代表这个路由虽然在框架内 但是不参与标签页显示\r\n          if (page) {\r\n            await dispatch('add', {\r\n              tag: page,\r\n              params,\r\n              query\r\n            })\r\n          }\r\n        }\r\n        commit('currentSet', name)\r\n        // end\r\n        resolve()\r\n      })\r\n    },\r\n    /**\r\n     * @class opened\r\n     * @description 关闭一个 tag (关闭一个页面)\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { tagName: 要关闭的标签名字, vm: vue }\r\n     */\r\n    close ({ state, commit, dispatch }, { tagName, vm }) {\r\n      return new Promise(async resolve => {\r\n        // 下个新的页面\r\n        let newPage = state.opened[0]\r\n        const isCurrent = state.current === tagName\r\n        // 如果关闭的页面就是当前显示的页面\r\n        if (isCurrent) {\r\n          // 去找一个新的页面\r\n          let len = state.opened.length\r\n          for (let i = 1; i < len; i++) {\r\n            if (state.opened[i].name === tagName) {\r\n              if (i < len - 1) {\r\n                newPage = state.opened[i + 1]\r\n              } else {\r\n                newPage = state.opened[i - 1]\r\n              }\r\n              break\r\n            }\r\n          }\r\n        }\r\n        // 找到这个页面在已经打开的数据里是第几个\r\n        const index = state.opened.findIndex(page => page.name === tagName)\r\n        if (index >= 0) {\r\n          // 更新数据 删除关闭的页面\r\n          state.opened.splice(index, 1)\r\n          // 如果这个页面是缓存的页面 将其在缓存设置中删除\r\n          commit('keepAliveRemove', tagName)\r\n        }\r\n        // 持久化\r\n        await dispatch('opend2db')\r\n        // 最后需要判断是否需要跳到首页\r\n        if (isCurrent) {\r\n          const { name = '', params = {}, query = {} } = newPage\r\n          let routerObj = {\r\n            name,\r\n            params,\r\n            query\r\n          }\r\n          vm.$router.push(routerObj)\r\n        }\r\n        // end\r\n        resolve()\r\n      })\r\n    },\r\n    /**\r\n     * @class opened\r\n     * @description 关闭当前标签左边的标签\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { pageSelect: 当前选中的tagName, vm: vue }\r\n     */\r\n    closeLeft ({ state, commit, dispatch }, { pageSelect, vm } = {}) {\r\n      return new Promise(async resolve => {\r\n        const pageAim = pageSelect || state.current\r\n        let currentIndex = 0\r\n        state.opened.forEach((page, index) => {\r\n          if (page.name === pageAim) {\r\n            currentIndex = index\r\n          }\r\n        })\r\n        if (currentIndex > 0) {\r\n          // 删除打开的页面 并在缓存设置中删除\r\n          state.opened.splice(1, currentIndex - 1).forEach(({ name }) => commit('keepAliveRemove', name))\r\n        }\r\n        state.current = pageAim\r\n        if (vm && vm.$route.name !== pageAim) {\r\n          vm.$router.push({\r\n            name: pageAim\r\n          })\r\n        }\r\n        // 持久化\r\n        await dispatch('opend2db')\r\n        // end\r\n        resolve()\r\n      })\r\n    },\r\n    /**\r\n     * @class opened\r\n     * @description 关闭当前标签右边的标签\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { pageSelect: 当前选中的tagName, vm: vue }\r\n     */\r\n    closeRight ({ state, commit, dispatch }, { pageSelect, vm } = {}) {\r\n      return new Promise(async resolve => {\r\n        const pageAim = pageSelect || state.current\r\n        let currentIndex = 0\r\n        state.opened.forEach((page, index) => {\r\n          if (page.name === pageAim) {\r\n            currentIndex = index\r\n          }\r\n        })\r\n        // 删除打开的页面 并在缓存设置中删除\r\n        state.opened.splice(currentIndex + 1).forEach(({ name }) => commit('keepAliveRemove', name))\r\n        // 设置当前的页面\r\n        state.current = pageAim\r\n        if (vm && vm.$route.name !== pageAim) {\r\n          vm.$router.push({\r\n            name: pageAim\r\n          })\r\n        }\r\n        // 持久化\r\n        await dispatch('opend2db')\r\n        // end\r\n        resolve()\r\n      })\r\n    },\r\n    /**\r\n     * @class opened\r\n     * @description 关闭当前激活之外的 tag\r\n     * @param {Object} state vuex state\r\n     * @param {Object} param { pageSelect: 当前选中的tagName, vm: vue }\r\n     */\r\n    closeOther ({ state, commit, dispatch }, { pageSelect, vm } = {}) {\r\n      return new Promise(async resolve => {\r\n        const pageAim = pageSelect || state.current\r\n        let currentIndex = 0\r\n        state.opened.forEach((page, index) => {\r\n          if (page.name === pageAim) {\r\n            currentIndex = index\r\n          }\r\n        })\r\n        // 删除打开的页面数据 并更新缓存设置\r\n        if (currentIndex === 0) {\r\n          state.opened.splice(1).forEach(({ name }) => commit('keepAliveRemove', name))\r\n        } else {\r\n          state.opened.splice(currentIndex + 1).forEach(({ name }) => commit('keepAliveRemove', name))\r\n          state.opened.splice(1, currentIndex - 1).forEach(({ name }) => commit('keepAliveRemove', name))\r\n        }\r\n        // 设置新的页面\r\n        state.current = pageAim\r\n        if (vm && vm.$route.name !== pageAim) {\r\n          vm.$router.push({\r\n            name: pageAim\r\n          })\r\n        }\r\n        // 持久化\r\n        await dispatch('opend2db')\r\n        // end\r\n        resolve()\r\n      })\r\n    },\r\n    /**\r\n     * @class opened\r\n     * @description 关闭所有 tag\r\n     * @param {Object} state vuex state\r\n     * @param {Object} vm vue\r\n     */\r\n    closeAll ({ state, commit, dispatch }, vm) {\r\n      return new Promise(async resolve => {\r\n        // 删除打开的页面 并在缓存设置中删除\r\n        state.opened.splice(1).forEach(({ name }) => commit('keepAliveRemove', name))\r\n        // 持久化\r\n        await dispatch('opend2db')\r\n        // 关闭所有的标签页后需要判断一次现在是不是在首页\r\n        if (vm.$route.name !== 'index') {\r\n          vm.$router.push({\r\n            name: 'index'\r\n          })\r\n        }\r\n        // end\r\n        resolve()\r\n      })\r\n    }\r\n  },\r\n  mutations: {\r\n    /**\r\n     * @class keepAlive\r\n     * @description 从已经打开的页面记录中更新需要缓存的页面记录\r\n     * @param {Object} state vuex state\r\n     */\r\n    keepAliveRefresh (state) {\r\n      state.keepAlive = state.opened.filter(item => isKeepAlive(item)).map(e => e.name)\r\n    },\r\n    /**\r\n     * @description 删除一个页面的缓存设置\r\n     * @param {Object} state vuex state\r\n     * @param {String} name name\r\n     */\r\n    keepAliveRemove (state, name) {\r\n      const list = [ ...state.keepAlive ]\r\n      remove(list, item => item === name)\r\n      state.keepAlive = list\r\n    },\r\n    /**\r\n     * @description 增加一个页面的缓存设置\r\n     * @param {Object} state vuex state\r\n     * @param {String} name name\r\n     */\r\n    keepAlivePush (state, name) {\r\n      const keep = [ ...state.keepAlive ]\r\n      keep.push(name)\r\n      state.keepAlive = Array.from(new Set(keep))\r\n    },\r\n    /**\r\n     * @description 清空页面缓存设置\r\n     * @param {Object} state vuex state\r\n     */\r\n    keepAliveClean (state) {\r\n      state.keepAlive = []\r\n    },\r\n    /**\r\n     * @class current\r\n     * @description 设置当前激活的页面 name\r\n     * @param {Object} state vuex state\r\n     * @param {String} name new name\r\n     */\r\n    currentSet (state, name) {\r\n      state.current = name\r\n    },\r\n    /**\r\n     * @class pool\r\n     * @description 保存 pool (候选池)\r\n     * @param {Object} state vuex state\r\n     * @param {Array} routes routes\r\n     */\r\n    init (state, routes) {\r\n      const pool = []\r\n      const push = function (routes) {\r\n        routes.forEach(route => {\r\n          if (route.children) {\r\n            push(route.children)\r\n          } else {\r\n            if (!route.hidden) {\r\n              const { meta, name, path } = route\r\n              pool.push({ meta, name, path })\r\n            }\r\n          }\r\n        })\r\n      }\r\n      push(routes)\r\n      state.pool = pool\r\n    }\r\n  }\r\n}\r\n"]}]}