{"remainingRequest":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\babel-loader\\lib\\index.js!D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\libs\\util.ice.js","dependencies":[{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\libs\\util.ice.js","mtime":1547717291795},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547717212861},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1547717208828},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\eslint-loader\\index.js","mtime":1547717230935}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\Project-Agent-Admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport _Array$isArray from \"D:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\Project-Agent-Admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/array/is-array\";\nimport _Object$assign from \"D:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\Project-Agent-Admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nvar util = {};\n/**\r\n * @description 路由配置扁平化\r\n * @param {Array} config 层级路由设置\r\n */\n\nutil.recursiveRouterConfig = function recursiveRouterConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var routerMap = [];\n  /**\r\n   * path -> name\r\n   * @param {String} path path\r\n   */\n\n  function path2name() {\n    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return path.split('/').filter(function (e) {\n      return e;\n    }).join('-');\n  }\n  /**\r\n   * recursive\r\n   * @param {Array} con config\r\n   */\n\n\n  function recursive(con) {\n    con.forEach(function (item) {\n      var route = item.layout ? {\n        // -> 在主布局内的页面\n        // 页面地址\n        path: item.path,\n        // 使用的布局\n        component: item.layout,\n        // 子路由 一个里面只会有一个子路由 并且 path = ‘’\n        children: [{\n          // 这里留空 访问上面父级地址的时候会自动跳到这里\n          path: '',\n          // 如果路由没有设置 name 就用 path 处理成name\n          name: item.name || path2name(item.path),\n          // 忽略标签页选项\n          hidden: item.hidden || false,\n          // meta 设置和默认值合并\n          meta: _Object$assign({\n            requiresAuth: true,\n            title: path2name(item.path)\n          }, item.meta),\n          // 页面组件\n          component: item.component\n        }]\n      } : {\n        // -> 不在主布局内的页面\n        // 页面地址\n        path: item.path,\n        // 如果路由没有设置 name 就用 path 处理成name\n        name: item.name || path2name(item.path),\n        // meta 设置和默认值合并\n        meta: _Object$assign({\n          requiresAuth: true,\n          title: path2name(item.path)\n        }, item.meta),\n        // 页面组件\n        component: item.component\n      };\n\n      if (_Array$isArray(item.children)) {\n        recursive(item.children);\n      }\n\n      routerMap.push(route);\n    });\n    return routerMap;\n  }\n\n  return recursive(config);\n};\n/**\r\n * @description 转换菜单数据\r\n * @param {Array} arr menu config\r\n */\n\n\nutil.recursiveMenuConfig = function recursiveMenuConfig(arr) {\n  var res = [];\n  /**\r\n   * 转换每个菜单对象上的 name 为 title\r\n   * @param {Object} obj menu\r\n   */\n\n  function convert(obj) {\n    var name = obj.name,\n        path = obj.path,\n        icon = obj.icon,\n        children = obj.children;\n    return _objectSpread({\n      title: name,\n      icon: icon,\n      path: path\n    }, children ? {\n      children: children.map(convert)\n    } : {});\n  }\n\n  arr.forEach(function (menu) {\n    res.push(convert(menu));\n  });\n  return res;\n};\n\nexport default util;",{"version":3,"sources":["D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\libs\\util.ice.js"],"names":["util","recursiveRouterConfig","config","routerMap","path2name","path","split","filter","e","join","recursive","con","forEach","item","route","layout","component","children","name","hidden","meta","requiresAuth","title","push","recursiveMenuConfig","arr","res","convert","obj","icon","map","menu"],"mappings":"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","sourcesContent":["const util = {}\r\n\r\n/**\r\n * @description 路由配置扁平化\r\n * @param {Array} config 层级路由设置\r\n */\r\nutil.recursiveRouterConfig = function recursiveRouterConfig (config = []) {\r\n  const routerMap = []\r\n  /**\r\n   * path -> name\r\n   * @param {String} path path\r\n   */\r\n  function path2name (path = '') {\r\n    return path.split('/').filter(e => e).join('-')\r\n  }\r\n  /**\r\n   * recursive\r\n   * @param {Array} con config\r\n   */\r\n  function recursive (con) {\r\n    con.forEach((item) => {\r\n      const route = item.layout ? {\r\n        // -> 在主布局内的页面\r\n        // 页面地址\r\n        path: item.path,\r\n        // 使用的布局\r\n        component: item.layout,\r\n        // 子路由 一个里面只会有一个子路由 并且 path = ‘’\r\n        children: [\r\n          {\r\n            // 这里留空 访问上面父级地址的时候会自动跳到这里\r\n            path: '',\r\n            // 如果路由没有设置 name 就用 path 处理成name\r\n            name: item.name || path2name(item.path),\r\n            // 忽略标签页选项\r\n            hidden: item.hidden || false,\r\n            // meta 设置和默认值合并\r\n            meta: Object.assign({\r\n              requiresAuth: true,\r\n              title: path2name(item.path)\r\n            }, item.meta),\r\n            // 页面组件\r\n            component: item.component\r\n          }\r\n        ]\r\n      } : {\r\n        // -> 不在主布局内的页面\r\n        // 页面地址\r\n        path: item.path,\r\n        // 如果路由没有设置 name 就用 path 处理成name\r\n        name: item.name || path2name(item.path),\r\n        // meta 设置和默认值合并\r\n        meta: Object.assign({\r\n          requiresAuth: true,\r\n          title: path2name(item.path)\r\n        }, item.meta),\r\n        // 页面组件\r\n        component: item.component\r\n      }\r\n      if (Array.isArray(item.children)) {\r\n        recursive(item.children)\r\n      }\r\n      routerMap.push(route)\r\n    })\r\n    return routerMap\r\n  }\r\n  return recursive(config)\r\n}\r\n\r\n/**\r\n * @description 转换菜单数据\r\n * @param {Array} arr menu config\r\n */\r\nutil.recursiveMenuConfig = function recursiveMenuConfig (arr) {\r\n  const res = []\r\n  /**\r\n   * 转换每个菜单对象上的 name 为 title\r\n   * @param {Object} obj menu\r\n   */\r\n  function convert (obj) {\r\n    const {\r\n      name, path, icon, children\r\n    } = obj\r\n    return {\r\n      title: name,\r\n      icon,\r\n      path,\r\n      ...children ? { children: children.map(convert) } : {}\r\n    }\r\n  }\r\n  arr.forEach((menu) => {\r\n    res.push(convert(menu))\r\n  })\r\n  return res\r\n}\r\n\r\nexport default util\r\n"]}]}