{"remainingRequest":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\babel-loader\\lib\\index.js!D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\layouts\\HeaderAside\\components\\menu-header\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\src\\layouts\\HeaderAside\\components\\menu-header\\index.vue","mtime":1547717291739},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547717212861},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1547717208828},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547717212861},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\Project-Agent-Admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1547717286390}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\Project-Agent-Admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { throttle } from 'lodash';\nimport { mapState } from 'vuex';\nimport menuMixin from '../mixin/menu';\nimport d2LayoutMainMenuItem from '../components/menu-item/index.vue';\nimport d2LayoutMainMenuSub from '../components/menu-sub/index.vue';\nexport default {\n  name: 'd2-layout-header-aside-menu-header',\n  mixins: [menuMixin],\n  components: {\n    'd2-layout-header-aside-menu-item': d2LayoutMainMenuItem,\n    'd2-layout-header-aside-menu-sub': d2LayoutMainMenuSub\n  },\n  computed: _objectSpread({}, mapState('d2admin/menu', ['header'])),\n  data: function data() {\n    return {\n      active: '',\n      isScroll: false,\n      scrollWidth: 0,\n      contentWidth: 0,\n      currentTranslateX: 0,\n      throttledCheckScroll: null\n    };\n  },\n  watch: {\n    '$route.matched': {\n      handler: function handler(val) {\n        this.active = val[val.length - 1].path;\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    scroll: function scroll(direction) {\n      if (direction === 'left') {\n        // 向右滚动\n        this.currentTranslateX = 0;\n      } else {\n        // 向左滚动\n        if (this.contentWidth * 2 - this.currentTranslateX <= this.scrollWidth) {\n          this.currentTranslateX -= this.contentWidth;\n        } else {\n          this.currentTranslateX = this.contentWidth - this.scrollWidth;\n        }\n      }\n    },\n    checkScroll: function checkScroll() {\n      var _this = this;\n\n      var contentWidth = this.$refs.content.clientWidth;\n      var scrollWidth = this.$refs.scroll.clientWidth;\n\n      if (this.isScroll) {\n        // 页面依旧允许滚动的情况，需要更新width\n        if (this.contentWidth - this.scrollWidth === this.currentTranslateX) {\n          // currentTranslateX 也需要相应变化【在右端到头的情况时】\n          this.currentTranslateX = contentWidth - scrollWidth; // 快速的滑动依旧存在判断和计算时对应的contentWidth变成正数，所以需要限制一下\n\n          if (this.currentTranslateX > 0) {\n            this.currentTranslateX = 0;\n          }\n        } // 更新元素数据\n\n\n        this.contentWidth = contentWidth;\n        this.scrollWidth = scrollWidth; // 判断何时滚动消失: 当scroll > content\n\n        if (contentWidth > scrollWidth) {\n          this.isScroll = false;\n        }\n      } // 判断何时滚动出现: 当scroll < content\n\n\n      if (!this.isScroll && contentWidth < scrollWidth) {\n        this.isScroll = true; // 注意，当isScroll变为true，对应的元素盒子大小会发生变化\n\n        this.$nextTick(function () {\n          contentWidth = _this.$refs.content.clientWidth;\n          scrollWidth = _this.$refs.scroll.clientWidth;\n          _this.contentWidth = contentWidth;\n          _this.scrollWidth = scrollWidth;\n          _this.currentTranslateX = 0;\n        });\n      }\n    }\n  },\n  mounted: function mounted() {\n    // 初始化判断\n    // 默认判断父元素和子元素的大小，以确定初始情况是否显示滚动\n    this.checkScroll(); // 全局窗口变化监听，判断父元素和子元素的大小，从而控制isScroll的开关\n\n    this.throttledCheckScroll = throttle(this.checkScroll, 300);\n    window.addEventListener('resize', this.throttledCheckScroll);\n  },\n  beforeDestroy: function beforeDestroy() {\n    // 取消监听\n    window.removeEventListener('resize', this.throttledCheckScroll);\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"d2-theme-header-menu\" ref=\"page\" :class=\"{'is-scrollable': isScroll}\" flex=\"cross:center\">\r\n    <div class=\"d2-theme-header-menu__content\" ref=\"content\" flex-box=\"1\" flex>\r\n      <div class=\"d2-theme-header-menu__scroll\" ref=\"scroll\" flex-box=\"0\" :style=\"'transform: translateX(' + currentTranslateX + 'px);'\">\r\n        <el-menu mode=\"horizontal\" :default-active=\"active\" @select=\"handleMenuSelect\">\r\n          <template v-for=\"(menu, menuIndex) in header\">\r\n            <d2-layout-header-aside-menu-item v-if=\"menu.children === undefined\" :menu=\"menu\" :key=\"menuIndex\"/>\r\n            <d2-layout-header-aside-menu-sub v-else :menu=\"menu\" :key=\"menuIndex\"/>\r\n          </template>\r\n        </el-menu>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"isScroll\" class=\"d2-theme-header-menu__prev\" flex-box=\"0\" @click=\"scroll('left')\" flex=\"main:center cross:center\">\r\n      <i class=\"el-icon-arrow-left\"></i>\r\n    </div>\r\n    <div v-if=\"isScroll\" class=\"d2-theme-header-menu__next\" flex-box=\"0\" @click=\"scroll('right')\" flex=\"cross:center\">\r\n      <i class=\"el-icon-arrow-right\"></i>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { throttle } from 'lodash'\r\nimport { mapState } from 'vuex'\r\nimport menuMixin from '../mixin/menu'\r\nimport d2LayoutMainMenuItem from '../components/menu-item/index.vue'\r\nimport d2LayoutMainMenuSub from '../components/menu-sub/index.vue'\r\nexport default {\r\n  name: 'd2-layout-header-aside-menu-header',\r\n  mixins: [\r\n    menuMixin\r\n  ],\r\n  components: {\r\n    'd2-layout-header-aside-menu-item': d2LayoutMainMenuItem,\r\n    'd2-layout-header-aside-menu-sub': d2LayoutMainMenuSub\r\n  },\r\n  computed: {\r\n    ...mapState('d2admin/menu', [\r\n      'header'\r\n    ])\r\n  },\r\n  data () {\r\n    return {\r\n      active: '',\r\n      isScroll: false,\r\n      scrollWidth: 0,\r\n      contentWidth: 0,\r\n      currentTranslateX: 0,\r\n      throttledCheckScroll: null\r\n    }\r\n  },\r\n  watch: {\r\n    '$route.matched': {\r\n      handler (val) {\r\n        this.active = val[val.length - 1].path\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n  methods: {\r\n    scroll (direction) {\r\n      if (direction === 'left') {\r\n        // 向右滚动\r\n        this.currentTranslateX = 0\r\n      } else {\r\n        // 向左滚动\r\n        if (this.contentWidth * 2 - this.currentTranslateX <= this.scrollWidth) {\r\n          this.currentTranslateX -= this.contentWidth\r\n        } else {\r\n          this.currentTranslateX = this.contentWidth - this.scrollWidth\r\n        }\r\n      }\r\n    },\r\n    checkScroll () {\r\n      let contentWidth = this.$refs.content.clientWidth\r\n      let scrollWidth = this.$refs.scroll.clientWidth\r\n      if (this.isScroll) {\r\n        // 页面依旧允许滚动的情况，需要更新width\r\n        if (this.contentWidth - this.scrollWidth === this.currentTranslateX) {\r\n          // currentTranslateX 也需要相应变化【在右端到头的情况时】\r\n          this.currentTranslateX = contentWidth - scrollWidth\r\n          // 快速的滑动依旧存在判断和计算时对应的contentWidth变成正数，所以需要限制一下\r\n          if (this.currentTranslateX > 0) {\r\n            this.currentTranslateX = 0\r\n          }\r\n        }\r\n        // 更新元素数据\r\n        this.contentWidth = contentWidth\r\n        this.scrollWidth = scrollWidth\r\n        // 判断何时滚动消失: 当scroll > content\r\n        if (contentWidth > scrollWidth) {\r\n          this.isScroll = false\r\n        }\r\n      }\r\n      // 判断何时滚动出现: 当scroll < content\r\n      if (!this.isScroll && contentWidth < scrollWidth) {\r\n        this.isScroll = true\r\n        // 注意，当isScroll变为true，对应的元素盒子大小会发生变化\r\n        this.$nextTick(() => {\r\n          contentWidth = this.$refs.content.clientWidth\r\n          scrollWidth = this.$refs.scroll.clientWidth\r\n          this.contentWidth = contentWidth\r\n          this.scrollWidth = scrollWidth\r\n          this.currentTranslateX = 0\r\n        })\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    // 初始化判断\r\n    // 默认判断父元素和子元素的大小，以确定初始情况是否显示滚动\r\n    this.checkScroll()\r\n    // 全局窗口变化监听，判断父元素和子元素的大小，从而控制isScroll的开关\r\n    this.throttledCheckScroll = throttle(this.checkScroll, 300)\r\n    window.addEventListener('resize', this.throttledCheckScroll)\r\n  },\r\n  beforeDestroy () {\r\n    // 取消监听\r\n    window.removeEventListener('resize', this.throttledCheckScroll)\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":"src\\layouts\\HeaderAside\\components\\menu-header"}]}